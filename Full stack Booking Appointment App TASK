.env file ->
DB_NAME=userdb
DB_USER=root
DB_PASSWORD=root123
DB_HOST=localhost
PORT=5000

models/User.js ->
const { DataTypes } = require('sequelize');

module.exports = (sequelize) => {
  return sequelize.define('User', {
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    email: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true,
    },
    phoneNumber: {
      type: DataTypes.STRING,
      allowNull: false,
    },
  });
};

controllers/userController.js ->
module.exports = (User) => ({
  createUser: async (req, res) => {
    try {
      const user = await User.create(req.body);
      res.status(201).json(user);
    } catch (err) {
      res.status(400).json({ error: err.message });
    }
  },

  getAllUsers: async (req, res) => {
    try {
      const users = await User.findAll();
      res.json(users);
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  },

  deleteUser: async (req, res) => {
    try {
      const id = req.params.id;
      const rows = await User.destroy({ where: { id } });
      if (rows) res.json({ message: 'User deleted' });
      else res.status(404).json({ error: 'User not found' });
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  },

  updateUser: async (req, res) => {
    try {
      const id = req.params.id;
      const [updated] = await User.update(req.body, { where: { id } });
      if (updated) {
        const updatedUser = await User.findByPk(id);
        res.json(updatedUser);
      } else {
        res.status(404).json({ error: 'User not found' });
      }
    } catch (err) {
      res.status(400).json({ error: err.message });
    }
  },
});

routes/userRoutes.js ->
const express = require('express');

module.exports = (User) => {
  const router = express.Router();
  const controller = require('../controllers/userController')(User);

  router.post('/', controller.createUser);
  router.get('/', controller.getAllUsers);
  router.delete('/:id', controller.deleteUser);
  router.put('/:id', controller.updateUser);
  return router;
};


index.js ->
const express = require('express');
const cors = require('cors');
const { Sequelize } = require('sequelize');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    host: process.env.DB_HOST,
    dialect: 'mysql',
    logging: false,
  }
);

const User = require('./models/User')(sequelize);

sequelize.sync().then(() => {
  console.log('Database synced & User table ready.');
});

const userRoutes = require('./routes/userRoutes')(User);
app.use('/api/users', userRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});

public/index.html ->
<!DOCTYPE html>
<html>
<head>
  <title>User Registration</title>
  <link rel="stylesheet" href="style.css" />
</head>
<body>
  <h1>User Registration</h1>
  <form id="userForm">
    <input type="text" id="name" placeholder="Name" required />
    <input type="email" id="email" placeholder="Email" required />
    <input type="text" id="phone" placeholder="Phone Number" required />
    <button type="submit">Register</button>
  </form>

  <h2>All Users</h2>
  <ul id="userList"></ul>

  <script src="script.js"></script>
</body>
</html>

public/style.css ->
body {
  font-family: sans-serif;
  padding: 20px;
}

input, button {
  margin: 5px;
}

li {
  margin-bottom: 10px;
}

public/script.js ->
const form = document.getElementById('userForm');
const userList = document.getElementById('userList');
const API = '/api/users';

form.addEventListener('submit', async (e) => {
  e.preventDefault();
  const name = document.getElementById('name').value.trim();
  const email = document.getElementById('email').value.trim();
  const phone = document.getElementById('phone').value.trim();
  if (!name || !email || !phone) return;

  await fetch(API, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ name, email, phoneNumber: phone }),
  });

  form.reset();
  loadUsers();
});

async function loadUsers() {
  const res = await fetch(API);
  const users = await res.json();
  userList.innerHTML = '';

  users.forEach(user => {
    const li = document.createElement('li');
    li.innerHTML = `
      <strong>${user.name}</strong> | ${user.email} | ${user.phoneNumber}
      <button onclick="deleteUser(${user.id})">Delete</button>
      <button onclick="editUser(${user.id}, '${user.name}', '${user.email}', '${user.phoneNumber}')">Edit</button>
    `;
    userList.appendChild(li);
  });
}

async function deleteUser(id) {
  await fetch(`${API}/${id}`, { method: 'DELETE' });
  loadUsers();
}

function editUser(id, oldName, oldEmail, oldPhone) {
  const newName = prompt('Enter new name:', oldName);
  const newEmail = prompt('Enter new email:', oldEmail);
  const newPhone = prompt('Enter new phone number:', oldPhone);

  if (newName && newEmail && newPhone) {
    fetch(`${API}/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ name: newName, email: newEmail, phoneNumber: newPhone }),
    }).then(loadUsers);
  }
}

loadUsers();


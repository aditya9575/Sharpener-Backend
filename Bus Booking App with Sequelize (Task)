.env ->
DB_NAME=bus_booking
DB_USER=root
DB_PASSWORD=yourpassword
DB_HOST=localhost
PORT=3000

// index.js
const express = require('express');
const { Sequelize } = require('sequelize');
const userRoutes = require('./routes/users');
const busRoutes = require('./routes/buses');
require('dotenv').config();

const app = express();
app.use(express.json());

// Sequelize connection
const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    host: process.env.DB_HOST,
    dialect: 'mysql',
    logging: false,
  }
);

// Import models
const User = require('./models/User')(sequelize);
const Bus = require('./models/Bus')(sequelize);
const Booking = require('./models/Booking')(sequelize);
const Payment = require('./models/Payment')(sequelize);

// Sync and seed data
sequelize.sync({ alter: true }).then(async () => {
  console.log('Tables synced successfully');

  const userCount = await User.count();
  if (userCount === 0) {
    await User.bulkCreate([
      { name: 'John Doe', email: 'john@example.com' },
      { name: 'Alice Smith', email: 'alice@example.com' },
      { name: 'Bob Johnson', email: 'bob@example.com' }
    ]);
    console.log('Sample users added');
  }

  const busCount = await Bus.count();
  if (busCount === 0) {
    await Bus.bulkCreate([
      { name: 'Volvo Express', totalSeats: 40, availableSeats: 25 },
      { name: 'RedLine Travel', totalSeats: 30, availableSeats: 15 }
    ]);
    console.log('Sample buses added');
  }
});

app.use('/users', userRoutes(User));
app.use('/buses', busRoutes(Bus));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});

// models/User.js
const { DataTypes } = require('sequelize');
module.exports = (sequelize) => {
  return sequelize.define('User', {
    name: {
      type: DataTypes.STRING,
      allowNull: false
    },
    email: {
      type: DataTypes.STRING,
      unique: true,
      allowNull: false
    }
  });
};

// models/Bus.js
const { DataTypes } = require('sequelize');
module.exports = (sequelize) => {
  return sequelize.define('Bus', {
    name: {
      type: DataTypes.STRING,
      allowNull: false
    },
    totalSeats: {
      type: DataTypes.INTEGER,
      allowNull: false
    },
    availableSeats: {
      type: DataTypes.INTEGER,
      allowNull: false
    }
  });
};

// models/Booking.js
const { DataTypes } = require('sequelize');
module.exports = (sequelize) => {
  return sequelize.define('Booking', {
    userId: {
      type: DataTypes.INTEGER,
      allowNull: false
    },
    busId: {
      type: DataTypes.INTEGER,
      allowNull: false
    },
    seatCount: {
      type: DataTypes.INTEGER,
      allowNull: false
    }
  });
};

// models/Payment.js
const { DataTypes } = require('sequelize');
module.exports = (sequelize) => {
  return sequelize.define('Payment', {
    userId: {
      type: DataTypes.INTEGER,
      allowNull: false
    },
    amount: {
      type: DataTypes.FLOAT,
      allowNull: false
    },
    method: {
      type: DataTypes.STRING,
      allowNull: false
    }
  });
};

// routes/users.js
const express = require('express');
module.exports = (User) => {
  const router = express.Router();

  router.post('/', async (req, res) => {
    try {
      const user = await User.create(req.body);
      res.status(201).json(user);
    } catch (err) {
      res.status(400).json({ error: err.message });
    }
  });

  router.get('/', async (req, res) => {
    try {
      const users = await User.findAll();
      res.json(users);
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  });

  return router;
};

// routes/buses.js
const express = require('express');
const { Op } = require('sequelize');
module.exports = (Bus) => {
  const router = express.Router();

  router.post('/', async (req, res) => {
    try {
      const bus = await Bus.create(req.body);
      res.status(201).json(bus);
    } catch (err) {
      res.status(400).json({ error: err.message });
    }
  });

  router.get('/available/:seats', async (req, res) => {
    try {
      const minSeats = parseInt(req.params.seats);
      const buses = await Bus.findAll({
        where: {
          availableSeats: {
            [Op.gt]: minSeats
          }
        }
      });
      res.json(buses);
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  });

  return router;
};

